# ==============================================================================
# AMS CMake File
# ==============================================================================

CMAKE_MINIMUM_REQUIRED(VERSION 2.8 FATAL_ERROR)
#SET(CMAKE_VERBOSE_MAKEFILE ON)

# ==============================================================================
# project setup ----------------------------------------------------------------
# ==============================================================================

# define project name ----------------------------
SET(AMS_VERSION 8.0.x)

# what languages we use --------------------------
ENABLE_LANGUAGE(CXX)

# ==============================================================================
# external dependencies --------------------------------------------------------
# ==============================================================================

IF(NOT DEFINED COMPOSITE_PROJECT)
    SET(DEVELOPMENT_ROOT "$ENV{DEVELOPMENT_ROOT}")
ENDIF(NOT DEFINED COMPOSITE_PROJECT)

IF(NOT DEVELOPMENT_ROOT)
    MESSAGE(FATAL_ERROR "DEVELOPMENT_ROOT variable is not set!")
ENDIF(NOT DEVELOPMENT_ROOT)

# ==============================================================================
# external libraries -----------------------------------------------------------
# ==============================================================================

# HIPOLY -----------------------------------------
SET(HIPOLY_ROOT ${DEVELOPMENT_ROOT}/projects/hipoly/1.0)
INCLUDE_DIRECTORIES(${HIPOLY_ROOT}/src/lib/hipoly SYSTEM)
INCLUDE_DIRECTORIES(${HIPOLY_ROOT}/src/lib/hipoly/compress SYSTEM)
INCLUDE_DIRECTORIES(${HIPOLY_ROOT}/src/lib/hipoly/error SYSTEM)
INCLUDE_DIRECTORIES(${HIPOLY_ROOT}/src/lib/hipoly/event SYSTEM)
INCLUDE_DIRECTORIES(${HIPOLY_ROOT}/src/lib/hipoly/file SYSTEM)
INCLUDE_DIRECTORIES(${HIPOLY_ROOT}/src/lib/hipoly/list SYSTEM)
INCLUDE_DIRECTORIES(${HIPOLY_ROOT}/src/lib/hipoly/option SYSTEM)
INCLUDE_DIRECTORIES(${HIPOLY_ROOT}/src/lib/hipoly/string SYSTEM)
INCLUDE_DIRECTORIES(${HIPOLY_ROOT}/src/lib/hipoly/stream SYSTEM)
INCLUDE_DIRECTORIES(${HIPOLY_ROOT}/src/lib/hipoly/thread SYSTEM)
INCLUDE_DIRECTORIES(${HIPOLY_ROOT}/src/lib/hipoly/time SYSTEM)
INCLUDE_DIRECTORIES(${HIPOLY_ROOT}/src/lib/hipoly/xml SYSTEM)
LINK_DIRECTORIES(${HIPOLY_ROOT}/lib)
SET(HIPOLY_LIB_NAME hipoly)

# boost ---------------------------------------
SET(BOOST_ROOT ${DEVELOPMENT_ROOT}/thirdparty/boost/1.51.0)
INCLUDE_DIRECTORIES(${BOOST_ROOT} SYSTEM)

# FBclient ---------------------------------------
SET(FBCLIENT_ROOT ${DEVELOPMENT_ROOT}/thirdparty/fbclient/2.5.2.26539)
INCLUDE_DIRECTORIES(${FBCLIENT_ROOT}/include SYSTEM)
LINK_DIRECTORIES(${FBCLIENT_ROOT}/lib)
SET(FBCLIENT_LIB_NAME fbclient)

# FIREBIRD ---------------------------------------
SET(FIREBIRD_ROOT ${DEVELOPMENT_ROOT}/projects/firebird/1.0)
INCLUDE_DIRECTORIES(${FIREBIRD_ROOT}/src/lib/firebird SYSTEM)
LINK_DIRECTORIES(${FIREBIRD_ROOT}/lib)
SET(FIREBIRD_LIB_NAME firebird)

# W3TK -------------------------------------------
SET(W3TK_ROOT ${DEVELOPMENT_ROOT}/projects/w3tk/1.0)
INCLUDE_DIRECTORIES(${W3TK_ROOT}/src/lib/w3tk SYSTEM)
INCLUDE_DIRECTORIES(${W3TK_ROOT}/src/lib/w3tk/fastcgi SYSTEM)
INCLUDE_DIRECTORIES(${W3TK_ROOT}/src/lib/w3tk/template SYSTEM)
LINK_DIRECTORIES(${W3TK_ROOT}/lib)
SET(W3TK_LIB_NAME w3tk)

# AMS -------------------------------------------
SET(AMS_ROOT ${DEVELOPMENT_ROOT}/projects/ams/8.0)
INCLUDE_DIRECTORIES(${AMS_ROOT}/src/lib/ams SYSTEM)
INCLUDE_DIRECTORIES(${AMS_ROOT}/src/lib/ams/system SYSTEM)
INCLUDE_DIRECTORIES(${AMS_ROOT}/src/lib/ams/soft SYSTEM)
INCLUDE_DIRECTORIES(${AMS_ROOT}/src/lib/ams/torque SYSTEM)
INCLUDE_DIRECTORIES(${AMS_ROOT}/src/lib/ams/cuda SYSTEM)
INCLUDE_DIRECTORIES(${AMS_ROOT}/src/lib/ams/srv SYSTEM)
INCLUDE_DIRECTORIES(${AMS_ROOT}/src/lib/torque SYSTEM)
LINK_DIRECTORIES(${AMS_ROOT}/lib)
SET(AMS_LIB_NAME ams)

# all libs ---------------------------------------
SET(AMS_LIBS
        ${AMS_LIB_NAME}
        ${W3TK_LIB_NAME}
        ${HIPOLY_LIB_NAME}
        ${SYSTEM_LIBS}
        )

SET(AMS_FB_LIBS
        ${AMS_LIB_NAME}
        ${W3TK_LIB_NAME}
        ${FIREBIRD_LIB_NAME}
        ${HIPOLY_LIB_NAME}
        ${SYSTEM_LIBS}
        )

# architecture -----------------------------------
SET(UNIX 1)
ADD_DEFINITIONS(-DUNIX)

# policies ---------------------------------------
IF(COMMAND cmake_policy)
    cmake_policy(SET CMP0003 NEW)
ENDIF(COMMAND cmake_policy)

# ==============================================================================
# output directories -----------------------------------------------------------
# ==============================================================================

SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin)
SET(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/lib)
LINK_DIRECTORIES(${CMAKE_BINARY_DIR}/lib)

# ==============================================================================
# rpaths -----------------------------------------------------------------------
# ==============================================================================

IF(NOT DEFINED COMPOSITE_PROJECT)
    # use, i.e. don't skip the full RPATH for the build tree
    SET(CMAKE_SKIP_BUILD_RPATH  FALSE)

    # when building, don't use the install RPATH already
    # (but later on when installing)
    SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)

    # the RPATH to be used when installing
    SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")

    # add the automatically determined parts of the RPATH
    # which point to directories outside the build tree to the install RPATH
    SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH FALSE)
ENDIF(NOT DEFINED COMPOSITE_PROJECT)

# ==============================================================================
# compiler setups --------------------------------------------------------------
# ==============================================================================

IF(NOT DEFINED COMPOSITE_PROJECT)
    SET(CMAKE_CXX_FLAGS_DEBUG "-g -Wall -Werror -pedantic-errors -Wundef -Wno-long-long")
    SET(CMAKE_CXX_FLAGS_RELEASE "-O2")

    SET(CMAKE_BUILD_TYPE Release)
    #SET(CMAKE_BUILD_TYPE Debug)
ENDIF(NOT DEFINED COMPOSITE_PROJECT)

# ==============================================================================
# project subdirectories  ------------------------------------------------------
# ==============================================================================

ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(var)
ADD_SUBDIRECTORY(etc)




